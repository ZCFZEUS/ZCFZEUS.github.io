[{"content":"定义 顺序表——用顺序存储的方式实现线性表顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。 1 2 3 4 typedef struct { int num; //号数 int people; //人数 } Customer; 顺序表的实现 静态分配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \u0026lt;stdio.h\u0026gt; #define MaxSize 10 //定义最大长度 typedef struct{ ElemType data[MaxSize]; //用静态的“数组”存放数据元素 int length; //顺序表的当前长度 }SqList; //顺序表的类型定义（静态分配方式） //基本操作-初始化一个顺序表 void InitList(SqList\u0026amp;L){ for(int i=0,i\u0026lt;MaxSize;i++) L.data[i] = 0;//将所有数据元素设置为默认值，否则内存中可能会有“脏数据” L.length = 0; } int main(){ SqList L; InitList(L); return 0; } 动态分配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \u0026lt;stdlib.h\u0026gt; #define InitSize 10 //顺序表的初始长度 typedef struct{ ElemType *data; //指示动态分配数组的指针 int MaxSize; //顺序表的最大容量 int length; //顺序表的当前长度 } SeqList; //顺序表的类型定义（动态分配方式） void InitList(SqList\u0026amp;L){ L.data = (int *)malloc (InitSize*sizeof(int)); L.length = 0; L.MaxSize = InitSize; int main() { SqList L; InitList(L); return 0; } //延长： void IncreaseSize(SeList \u0026amp;L,int len){ int *p = L.data; L.data = (int *)malloc ((L.MaxSize+len)*sizeof(int)); for(int i=0,i\u0026lt;L.length;i++){ L.data[i] = p[i]; } L.MaxaSize += len; free(p);//释放原来内存空间 } } 总结 顺序表的特点：\n①随机访问，即可以在 O(1) 时间内找到第 i 个元素。\n②存储密度高，每个节点只存储数据元素\n③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）\n④插入、删除操作不方便，需要移动大量元素 ","date":"2025-04-02T22:47:03+08:00","permalink":"https://ZCFZEUS.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.2-%E9%A1%BA%E5%BA%8F%E8%A1%A8/","title":"数据结构2.2-顺序表"},{"content":"定义 线性表是具有相同数据类型的n个数据元素的有限序列.\nn为表长，当n = 0时线性表是一个空表.\n若用L命名线性表，则其一般表示为,L = (a1, a2, … , ai, … , an).\n几个概念:\nai是线性表中的“第i个”元素线性表中的位序.\na1是表头元素；an是表尾元素.\n除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继.\n基本操作 InitList(\u0026amp;L):初始化表。构造一个空的线性表L，分配内存空间。\nDestroyList(\u0026amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。\nListInsert(\u0026amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。\nListDelete(\u0026amp;L,i,\u0026amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。\nLocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。\nGetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。\nLength(L)：求表长。返回线性表L的长度，即L中数据元素的个数。\nPrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。\nEmpty(L)：判空操作。若L为空表，则返回true，否则返回false。\n什么时候要传入参数的引用“\u0026amp;” —— 对参数的修改结果需要“带回来”.\n","date":"2025-04-02T22:03:49+08:00","permalink":"https://ZCFZEUS.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.1-%E7%BA%BF%E6%80%A7%E8%A1%A8/","title":"数据结构2.1-线性表"},{"content":"ADC概述 简介 ADC:模数转换器 作用：将引脚上连续变化的模拟电压转换成内存中存储的数字变量 12位逐次逼近型ADC：1us转换时间 输入电压范围：03.3V 结果转换范围：04095\n分类 规则组：用于常规使用 注入组：用于突发情况使用ADC功能\n类似主线程和中断的关系，若触发开始转换注入组可以对正在转换的规则组进行插队。\n","date":"2025-03-30T00:00:00Z","permalink":"https://ZCFZEUS.github.io/p/adc%E6%A8%A1%E6%95%B0%E8%BD%AC%E6%8D%A2%E5%99%A8/","title":"ADC模数转换器"}]