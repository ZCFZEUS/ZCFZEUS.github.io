[{"content":"电阻应变片的种类 常按材料、工作温度范围及用途不同分类\n①按应变片敏感栅的材料分类，可将应变片分成金属应变片和半导体应变片两大类。\n② 按应变片的工作温度分类可分为常温应变片（20℃～60℃）、中温应变片（60℃～300℃）、高温应变片（300℃以上）和低温应变片（低于20℃）等。\n③按应变片的用途分类可分为一般用途应变片和特殊用途应变片（水下、疲劳寿命、抗磁感应、裂缝扩展等）。\n金属电阻应变片 结构 金属电阻应变片简称应变片，其结构大体相同，如图所示。由敏感栅、基底、覆盖层、引线和黏结剂等部分组成。\n敏感栅：实现应变-电阻转换的敏感元件，阻值一般在100Ω以上\n基底：粘贴、定位、绝缘，起着准确将试件应变传递到敏感栅的作用。为此，基底通常很薄，一般为0.02-0.04mm\n覆盖层：用纸或透明胶纸覆盖在敏感栅上，防潮、防尘、防蚀、防损\n引线：起敏感栅与测量电路间的过渡连接和引导作用\n黏结剂：传递应变\n分类 丝式应变片（分回线式和短接式两种） ① 回线式应变片:回线式应变片是将电阻丝绕制成栅粘在绝缘基片上制成的，如图4-2(a)\n特点：制作简单、性能稳定、价格便宜\n② 短接式应变片:短接式应变片是将数根等长的敏感金属丝平行放置，两端用直径比金属丝大5～10倍的镀银丝短接起来而构成的，如图4-2(b)\n优点：克服了回线式应变片的横向效应\n缺点：焊点多，易疲劳损坏\n箔式应变片 箔式应变片是将很薄的金属片粘于基片上，经光刻、腐蚀等制成金属箔敏感栅。给箔敏感栅接上金属丝电极，再涂覆与基片同质料的覆盖层。结构如图4-3所示\n优点：尺寸准确、线条均匀、可按需要做成各种形状、横向效应小、散热好、准确传递、薄、柔、寿命长、稳定性好\n缺点：灵敏度较低\n薄膜应变片 薄膜应变片是薄膜技术发展的产物。它是采用真空蒸发或真空沉积等方法，在薄的绝缘基片上形成厚度在0.1µm下的金属电阻材料薄膜的敏感栅，最后加上保护层。\n优点：应变灵敏系数大，允许电流密度大，工作范围广，温度可达197～371℃\n缺点：难以控制电阻与温度和时间的变化关系\n工作原理 参数 金属电阻应变片的主要参数有：\n（1）应变片电阻值R\n（2）灵敏系数k\n（3）机械滞后Zj\n（4）横向效应及横向效应系数H\n（5）零漂P和蠕变θ\n（6）绝缘电阻Rm\n应变片电阻值R:应变片没有粘贴及未参与变形前，室温下测定的电阻值称为初始电阻值，其中120Ω最常用，应变片电阻值的大小应与测量电阻相配合\n灵敏系数k：衡量应变片质量的重要标志\n机械滞后Zj：实际应用中，由于敏感栅基底和黏结剂材料性能，或者使用过程中的过载、过热，都会使应变计产生残余形变，导致应变片输出的不重合。这种不重合用机械滞后Zj来衡量。它是指粘贴在试件上的应变片，在恒温条件下增（加载）、减（卸载）试件应变的过程中，对应同一机械应变所指示应变量（输出）之差。通常，在室温条件下，要求机械滞后Zj \u0026lt; 3-10με。实测中，可在测试前通过多次重复预加、卸载，来减小机械滞后产生的误差\n横向效应及横向效应系数H\n横向效应：应变片在感受被测试件的应变时，横向应变将使其电阻变化率减小，从而降低灵敏系数，称为应变片的横向效应\n横向效应系数H：垂直时与平行时应变之比\n零漂P和蠕变θ\n零漂：温度恒定、试件初始空载时，应变片电阻值随时间变化的特性。两者之差即为零漂或稳定性误差。可用相对误差或绝对误差表示\n绝缘电阻Rm:略，懒得写了\n温度误差及其补偿 温度误差 温度补偿 单丝自补偿应变片 优点：结构简单，制造、使用方便\n缺点：一种αt值的应变片只能对应在一种材料上应用，局限性大\n双丝自补偿应变片 电桥补偿法 半导体应变片 半导体应变片的分类和结构 按照材料类型分为P型硅应变片、N型硅应变片、PN互补型应变片\n按照特性分为灵敏系数补偿型应变片和非线性补偿应变片\n按照材料的化学成分分为硅、锗、锑化铟、磷化镓、磷化铟等应变片\n目前应用较多的是按照结构分类，包括体型应变片、扩散型应变片和薄膜型半导体应变计\n半导体应变片的工作原理 优点：尺寸、横向效应、机械滞后都很小，灵敏系数极大，因而输出也大，可以不需要放大器直接与记录仪器连接，使得测量系统简化\n缺点：测量较大应变时非线性严重，灵敏系数随受拉或受压而变，且分散度大，一般为3%-5%\n电阻应变片的测量电路 电阻应变片把机械应变信号转换成后，由于应变量及其应变电阻变化一般都很微小，既难以直接精确测量，又不便直接处理，因此，必须采用转换电路或仪器，把应变片的变化转换成电压或电流变化。通常，采用电桥电路实现这种转换。\n直流电桥电路 直流电桥平衡条件 图4-6所示为直流电桥的基本电路，E为电桥电源电压，R1、R2、R3、R4为电桥的桥臂，RL为其负载（可以是测量仪表的内阻或其他负载）。\n电压灵敏度 非线性误差及其补偿方法 提高桥臂比 提高桥臂比可减小非线性误差。但是从电压灵敏度来考虑，提高桥臂比会降低电压灵敏度。因此，为达到既减小非线性误差又不降低电压灵敏度的目的，必须适当提高电源电压E\n采用差动电桥 根据被测试件的受力情况，在同一试件上分别粘贴两个应变片，一个感受拉力，另一个感受压力，两者应变符号相反，测试时，将两个应变片接入电桥的相邻臂上，如图4.7所示，称此电桥电路为半桥差动电路\n优点：差动电桥无非线性误差，而且电压灵敏度为Sv=0.5E,比使用一只应变片提高了1倍，同时可以起到温度补偿的作用\n给电桥的四臂接入4片应变片，使两个桥臂应变片受到拉力，两个桥臂应变片受到压力，将两个应变符号相同的接入相对桥臂上，则构成全桥差动电路。差动桥路的输出电压和电压灵敏度比单片提高了4倍，比半桥差动电路提高了1倍\n采用高内阻的恒流源电桥 产生非线性的原因之一是，在工作过程中通过桥臂的电流不恒定。所以有时用恒流电源供电。如图4-9所示。一般情况下，半导体应变电桥都采用恒流供电，供电电流为 ，通过各臂的电流分别为 和 ，如果测量电路的输入阻抗较高，则I1(R1+R2)=I2(R3+R4),I0=I1+I2,解方程可求得I1和I2\n","date":"2025-04-05T11:55:07+08:00","permalink":"https://ZCFZEUS.github.io/p/%E4%BC%A0%E6%84%9F%E5%99%A84.1-%E5%BA%94%E5%8F%98%E5%BC%8F%E7%94%B5%E9%98%BB%E4%BC%A0%E6%84%9F%E5%99%A8/","title":"传感器4.1 应变式电阻传感器"},{"content":" ","date":"2025-04-04T19:38:27+08:00","permalink":"https://ZCFZEUS.github.io/p/%E4%BC%A0%E6%84%9F%E5%99%A84.2-%E5%8E%8B%E7%94%B5%E5%BC%8F%E5%8A%9B%E4%BC%A0%E6%84%9F%E5%99%A8/","title":"传感器4.2 压电式力传感器"},{"content":"定义 顺序表——用顺序存储的方式实现线性表顺序存储。把逻辑上相邻的元素存储在物理位置上也相邻的存储单元中，元素之间的关系由存储单元的邻接关系来体现。 1 2 3 4 typedef struct { int num; //号数 int people; //人数 } Customer; 顺序表的实现 静态分配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 #include \u0026lt;stdio.h\u0026gt; #define MaxSize 10 //定义最大长度 typedef struct{ ElemType data[MaxSize]; //用静态的“数组”存放数据元素 int length; //顺序表的当前长度 }SqList; //顺序表的类型定义（静态分配方式） //基本操作-初始化一个顺序表 void InitList(SqList\u0026amp;L){ for(int i=0,i\u0026lt;MaxSize;i++) L.data[i] = 0;//将所有数据元素设置为默认值，否则内存中可能会有“脏数据” L.length = 0; } int main(){ SqList L; InitList(L); return 0; } 动态分配 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 #include \u0026lt;stdlib.h\u0026gt; #define InitSize 10 //顺序表的初始长度 typedef struct{ ElemType *data; //指示动态分配数组的指针 int MaxSize; //顺序表的最大容量 int length; //顺序表的当前长度 } SeqList; //顺序表的类型定义（动态分配方式） void InitList(SqList\u0026amp;L){ L.data = (int *)malloc (InitSize*sizeof(int)); L.length = 0; L.MaxSize = InitSize; int main() { SqList L; InitList(L); return 0; } //延长： void IncreaseSize(SeList \u0026amp;L,int len){ int *p = L.data; L.data = (int *)malloc ((L.MaxSize+len)*sizeof(int)); for(int i=0,i\u0026lt;L.length;i++){ L.data[i] = p[i]; } L.MaxaSize += len; free(p);//释放原来内存空间 } } 总结 顺序表的特点：\n①随机访问，即可以在 O(1) 时间内找到第 i 个元素。\n②存储密度高，每个节点只存储数据元素\n③拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）\n④插入、删除操作不方便，需要移动大量元素 ","date":"2025-04-02T22:47:03+08:00","permalink":"https://ZCFZEUS.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.2-%E9%A1%BA%E5%BA%8F%E8%A1%A8/","title":"数据结构2.2-顺序表"},{"content":"定义 线性表是具有相同数据类型的n个数据元素的有限序列.\nn为表长，当n = 0时线性表是一个空表.\n若用L命名线性表，则其一般表示为,L = (a1, a2, … , ai, … , an).\n几个概念:\nai是线性表中的“第i个”元素线性表中的位序.\na1是表头元素；an是表尾元素.\n除第一个元素外，每个元素有且仅有一个直接前驱；除最后一个元素外，每个元素有且仅有一个直接后继.\n基本操作 InitList(\u0026amp;L):初始化表。构造一个空的线性表L，分配内存空间。\nDestroyList(\u0026amp;L)：销毁操作。销毁线性表，并释放线性表L所占用的内存空间。\nListInsert(\u0026amp;L,i,e)：插入操作。在表L中的第i个位置上插入指定元素e。\nListDelete(\u0026amp;L,i,\u0026amp;e)：删除操作。删除表L中第i个位置的元素，并用e返回删除元素的值。\nLocateElem(L,e)：按值查找操作。在表L中查找具有给定关键字值的元素。\nGetElem(L,i)：按位查找操作。获取表L中第i个位置的元素的值。\nLength(L)：求表长。返回线性表L的长度，即L中数据元素的个数。\nPrintList(L)：输出操作。按前后顺序输出线性表L的所有元素值。\nEmpty(L)：判空操作。若L为空表，则返回true，否则返回false。\n什么时候要传入参数的引用“\u0026amp;” —— 对参数的修改结果需要“带回来”.\n","date":"2025-04-02T22:03:49+08:00","permalink":"https://ZCFZEUS.github.io/p/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842.1-%E7%BA%BF%E6%80%A7%E8%A1%A8/","title":"数据结构2.1-线性表"}]